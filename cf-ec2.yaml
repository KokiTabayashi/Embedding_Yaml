AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  ProxySecurityGroup:
    Type: String
  FrontSecurityGroup:
    Type: String
  BackSecurityGroup:
    Type: String
  MyKeyName:
    Type: String
    Default: cf_aws_key
  ProxyEC2InstanceName:
    Type: String
    Default: ProxyEC2InstanceName
  FrontEC2InstanceName:
    Type: String
    Default: FrontEC2Instance
  BackEC2InstanceName:
    Type: String
    Default: BackEC2Instance

Resources:
  ProxyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-032d7402806156fc7
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref ProxySecurityGroup
      KeyName: !Ref MyKeyName
      Tags:
        - Key: Name
          Value: !Ref ProxyEC2InstanceName
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sed -i 's|ORIGIN_SERVER_NAME|${FrontEC2PublicDNS}|g' /etc/nginx/nginx.conf
            sed -i 's|ORIGIN_PROXY_PASS|http://${FrontEC2PublicDNS}|g' /etc/nginx/nginx.conf
            sed -i 's|ORIGIN_SERVER_PORT|8080|g' /etc/nginx/nginx.conf
            service nginx start
          - FrontEC2PublicDNS: !GetAtt FrontEC2Instance.PublicDnsName

  ProxyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref ProxyEIP
      InstanceId: !Ref ProxyEC2Instance

  ProxyEIP:
    Type: AWS::EC2::EIP

  FrontEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bd642e343e80eced
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref FrontSecurityGroup
      KeyName: !Ref MyKeyName
      Tags:
        - Key: Name
          Value: !Ref FrontEC2InstanceName
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            su ec2-user -c 'aws s3 cp s3://webapp-embedding-2023-0904/frontend.zip /home/ec2-user/frontend.zip'
            su ec2-user -c 'cd /home/ec2-user; unzip -o frontend.zip'
            su ec2-user -c 'aws s3 cp s3://webapp-embedding-2023-0904/frontend_env /home/ec2-user/frontend/.env'
            su ec2-user -c 'aws s3 cp s3://webapp-embedding-2023-0904/frontend-react-app_env /home/ec2-user/frontend/frontend-react-app/.env'
            echo "REACT_APP_ADDRESS_BACKEND=${BackEIP}" >> /home/ec2-user/frontend/frontend-react-app/.env
            su ec2-user -c 'cd /home/ec2-user/frontend/frontend-react-app; npm run build'
            su ec2-user -c 'sleep 5; pm2 start /home/ec2-user/frontend/frontend_node.js'
          - BackEIP: !Ref BackEIP

  FrontEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref FrontEIP
      InstanceId: !Ref FrontEC2Instance

  FrontEIP:
    Type: AWS::EC2::EIP

  BackEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-030293faa878df9aa
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref BackSecurityGroup
      KeyName: !Ref MyKeyName
      Tags:
        - Key: Name
          Value: !Ref BackEC2InstanceName
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          su ec2-user -c 'mkdir /home/ec2-user/dev'
          su ec2-user -c 'aws s3 cp s3://webapp-embedding-2023-0904/backend.zip /home/ec2-user/dev/backend.zip'
          su ec2-user -c 'cd /home/ec2-user/dev; unzip -o backend.zip'
          su ec2-user -c 'aws s3 cp s3://webapp-embedding-2023-0904/backend_env /home/ec2-user/dev/backend/.env'
          su ec2-user -c 'sleep 5; pm2 start /home/ec2-user/dev/backend/backend_node.js'

  BackEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref BackEIP
      InstanceId: !Ref BackEC2Instance

  BackEIP:
    Type: AWS::EC2::EIP

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2InstanceProfile
      Path: /
      Roles:
        - !Ref EC2InstanceS3Role

  EC2InstanceS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RoleEc2ReadS3
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  EC2InstanceS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PolicyS3ReadOnly
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
              - s3-object-lambda:Get*
              - s3-object-lambda:List*
            Resource:
              - '*'
      Roles:
        -
          !Ref EC2InstanceS3Role